#!/bin/bash

# Colorize terminal
red='\e[0;31m'
no_color='\033[0m'
# Console step increment
i=1

# Default settings
DRY_RUN="false"

# Script help text
TEXT_HELPER="\nThis script assists in constructing a conventional commit message with a gitmoji.
Available flags are:

  -d    (Optional) Dry run. Only displays the git commit command without executing it.
        Default is '$DRY_RUN'.

  -h    Display this help message.\n\n"

print_help() {
  printf "$TEXT_HELPER"
}

# Parse options
while getopts dh flag; do
  case "${flag}" in
    d) DRY_RUN="true";;
    h | *)
      print_help
      exit 0;;
  esac
done

check_packages() {
  for package in "$@"; do
    if ! command -v "$package" >/dev/null 2>&1; then
      echo -e "${red}Error: You need $package installed.${no_color}"
      exit 1
    fi
  done
}

check_packages gum fzf git

SCOPES="None
web
api
database
ci/cd
docs"

COMMIT_TYPES="fix: Fixes a bug in the code
feat: Adds or removes a new feature
docs: Updates documentation only
style: Changes code style/formatting without affecting meaning
refactor: Restructures code without changing API behavior
perf: Optimizes performance, often a specific kind of refactor
test: Adds or updates tests
build: Changes that affect the build system or dependencies
ops: Changes to infrastructure, deployment, or other operational components
chore: Other changes that don’t modify src or test files, e.g., modifying .gitignore"

GITMOJIS="🎨 :art: Improve structure / format of the code.
⚡️ :zap: Improve performance.
🔥 :fire: Remove code or files.
🐛 :bug: Fix a bug.
🚑️ :ambulance: Critical hotfix.
✨ :sparkles: Introduce new features.
📝 :memo: Add or update documentation.
🚀 :rocket: Deploy stuff.
💄 :lipstick: Add or update the UI and style files.
🎉 :tada: Begin a project.
✅ :white_check_mark: Add, update, or pass tests.
🔒️ :lock: Fix security or privacy issues.
🔐 :closed_lock_with_key: Add or update secrets.
🔖 :bookmark: Release / Version tags.
🚨 :rotating_light: Fix compiler / linter warnings.
🚧 :construction: Work in progress.
💚 :green_heart: Fix CI Build.
⬇️ :arrow_down: Downgrade dependencies.
⬆️ :arrow_up: Upgrade dependencies.
📌 :pushpin: Pin dependencies to specific versions.
👷 :construction_worker: Add or update CI build system.
📈 :chart_with_upwards_trend: Add or update analytics or track code.
♻️ :recycle: Refactor code.
➕ :heavy_plus_sign: Add a dependency.
➖ :heavy_minus_sign: Remove a dependency.
🔧 :wrench: Add or update configuration files.
🔨 :hammer: Add or update development scripts.
🌐 :globe_with_meridians: Internationalization and localization.
✏️ :pencil2: Fix typos.
💩 :poop: Write bad code that needs to be improved.
⏪️ :rewind: Revert changes.
🔀 :twisted_rightwards_arrows: Merge branches.
📦️ :package: Add or update compiled files or packages.
👽️ :alien: Update code due to external API changes.
🚚 :truck: Move or rename resources.
📄 :page_facing_up: Add or update license.
💥 :boom: Introduce breaking changes.
🍱 :bento: Add or update assets.
♿️ :wheelchair: Improve accessibility.
💡 :bulb: Add or update comments in source code.
🍻 :beers: Write code drunkenly.
💬 :speech_balloon: Add or update text and literals.
🗃️ :card_file_box: Perform database related changes.
🔊 :loud_sound: Add or update logs.
🔇 :mute: Remove logs.
👥 :busts_in_silhouette: Add or update contributor(s).
🚸 :children_crossing: Improve user experience / usability.
🏗️ :building_construction: Make architectural changes.
📱 :iphone: Work on responsive design.
🤡 :clown_face: Mock things.
🥚 :egg: Add or update an easter egg.
🙈 :see_no_evil: Add or update a .gitignore file.
📸 :camera_flash: Add or update snapshots.
⚗️ :alembic: Perform experiments.
🔍️ :mag: Improve SEO.
🏷️ :label: Add or update types.
🌱 :seedling: Add or update seed files.
🚩 :triangular_flag_on_post: Add, update, or remove feature flags.
🥅 :goal_net: Catch errors.
💫 :dizzy: Add or update animations and transitions.
🗑️ :wastebasket: Deprecate code that needs to be cleaned up.
🛂 :passport_control: Work on code related to authorization, roles, and permissions.
🩹 :adhesive_bandage: Simple fix for a non-critical issue.
🧐 :monocle_face: Data exploration/inspection.
⚰️ :coffin: Remove dead code.
🧪 :test_tube: Add a failing test.
👔 :necktie: Add or update business logic.
🩺 :stethoscope: Add or update healthcheck.
🧱 :bricks: Infrastructure related changes.
🧑‍💻 :technologist: Improve developer experience.
💸 :money_with_wings: Add sponsorships or money related infrastructure.
🧵 :thread: Add or update code related to multithreading or concurrency.
🦺 :safety_vest: Add or update code related to validation."

printf "\nScript settings:\n"
printf "  -> dry run: ${red}${DRY_RUN}${no_color}\n"

printf "\n${red}${i}.${no_color} Select commit type\n\n"
i=$((i + 1))
TYPE=$(echo "$COMMIT_TYPES" | fzf --prompt="Select commit type: " | cut -d: -f1)

printf "\n${red}${i}.${no_color} Select scope (optional)\n\n"
i=$((i + 1))
SCOPE=$(echo "$SCOPES" | fzf --prompt="Select scope (optional, choose 'None' to skip): ")

printf "\n${red}${i}.${no_color} Select gitmoji\n\n"
i=$((i + 1))
GITMOJI=$(echo "$GITMOJIS" | fzf --prompt="Search for a gitmoji: " | awk '{print $1}')

if [ "$SCOPE" == "None" ]; then
  SCOPE=""
else
  SCOPE="($SCOPE)"
fi

SUMMARY=$(gum input --value "$TYPE$SCOPE: $GITMOJI " --placeholder "Summary of this change (optional)")
DESCRIPTION=$(gum write --placeholder "Detailed description of this change (optional)")

if [ -n "$DESCRIPTION" ]; then
    COMMIT_CMD="git commit -m \"$SUMMARY\" -m \"$DESCRIPTION\""
else
    COMMIT_CMD="git commit -m \"$SUMMARY\""
fi

if [ "$DRY_RUN" = "true" ]; then
    echo -e "\n${red}Dry Run:${no_color} $COMMIT_CMD"
else
    gum confirm "Confirm commit?" && eval "$COMMIT_CMD"
fi