#!/usr/bin/env bash
#  vim:ts=4:sts=4:sw=4:et
#
#  Author: Hari Sekhon
#  Date: 2025-05-14 05:27:20 +0300 (Wed, 14 May 2025)
#
#  https///github.com/HariSekhon/DevOps-Bash-tools
#
#  License: see accompanying Hari Sekhon LICENSE file
#
#  If you're using my code you're welcome to connect with me on LinkedIn
#  and optionally send me feedback to help steer this or other code I publish
#
#  https://www.linkedin.com/in/HariSekhon
#

set -euo pipefail
[ -n "${DEBUG:-}" ] && set -x
srcdir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# shellcheck disable=SC1090,SC1091
die(){
    echo "$@" >&2
    exit 1
}

timestamp(){
    printf "%s  %s" "$(date '+%F %T')" "$*" >&2
    if [ $# -gt 0 ]; then
        printf '\n' >&2
    fi
}

help_usage(){
    for arg; do
        case "$arg" in
            -h|-help|--help)  usage
                              ;;
        esac
    done
}

min_args(){
    local min="$1"
    shift || :
    if [ $# -lt "$min" ]; then
        usage "error: missing arguments"
    fi
}

usage(){
    local args=""
    local switches=""
    local description=""
    if [ -n "${usage_args:-}" ]; then
        args="$usage_args"
    fi
    if [ -n "${usage_switches:-}" ]; then
        switches="$usage_switches"
        switches="${switches##[[:space:]]}"
        switches="${switches%%[[:space:]]}"
    fi
    if [ -n "${usage_description:-}" ]; then
        description="$usage_description
"
    fi
    if [ -n "$*" ]; then
        echo "$*" >&2
        echo >&2
    fi
    cat >&2 <<EOF
$description
usage: ${0##*/} $args

$switches
-h --help           Print usage help and exit
EOF
    exit 3
}

# shellcheck disable=SC2034,SC2154
usage_description="
Launches tmux and runs the commands given as args in equally balanced horizontal panes
Fast way to launch a bunch of commands in an easily reviewable way
If there is only one arg which is a single digit integer, then launches that many \$SHELL panes
Autogenerates a new session name in the form of \$tmuxnhdo-\$rand ascii for uniqueness

Example:
    ${0##*/} htop 'iostat 1' bash
    ${0##*/} bash bash bash
    ${0##*/} 3
"

# used by usage() in lib/utils.sh
# shellcheck disable=SC2034
usage_args='"<command_1>" "<command_2>" ["<command_3>" ...]'

help_usage "$@"

min_args 1 "$@"



# cannot separate the session name with a dot as this breaks:
#
#   tmux has-session -t "$session"
#
# this command:
#
#   tmux has-session -t /Users/hari/mydir.1747191485
#
# results in this:
#
#   can't find window: /Users/hari/mydir
#

session=$(mktemp -t tmuxnhdo.XXXXXXXXXX)
rm -f session
session=${session##*/}
session=${session##*.}
session="tmuxnhdo-$session"

cmd1="$1"

shift || :

if [ $# -eq 0 ]; then
   if [[ "$cmd1" =~ ^[[:digit:]]$ ]]; then
        shell="${SHELL:-bash}"
        count="$cmd1"
        cmd1="$shell"
        args=()
        for ((i = 1; i < count; i++)); do
            args+=("$shell")
        done
        set -- "${args[@]}"
    else
        usage "Error: two or more args required unless you are specifying a count of shell panes to launch, otherwise there would be no panes to split"
    fi
fi

timestamp "Starting new tmux session in detached mode called '$session' with command: $cmd1"
tmux new-session -d -s "$session" "$cmd1"

if ! tmux has-session -t "$session"; then
    die "ERROR: tmux session exited too soon from first command: $cmd1"
fi

for cmd; do
    timestamp "Splitting the tmux pane horizontally and launching command: $cmd"
    tmux split-window -v -t "$session":1 "$cmd"
done

timestamp "Balancing the tmux pane layout horizontally for tmux session: $session"
tmux select-layout -t "$session":1 even-vertical

timestamp "Attaching to tmux session: $session"
tmux attach-session -t "$session" || tmux switch-client -t "$session"
