#!/usr/bin/env bash

# Ref: https://github.com/junegunn/fzf/blob/master/ADVANCED.md#switching-between-ripgrep-mode-and-fzf-mode

# MNEMONIC: [F]uzzy search [G]rep [R]e-interactive
# SYNOPSIS: frgg [rg's OPTIONS] [PATTERN]
# DESCRIPTION: Riggrep powered by FZF
#   It has two modes:
#   1) rg mode, fzf merely acts as the interactive interface, providing the live grep experience for rg.
#   2) fzf mode, normal fzf, fuzzy finder for the current results of rg.
# KEYBINDINGS:
#   1) ENTER: open the selections via vim: if only one entry is selected,
#      open it directly; if multiple entrys are selected, open the first one and
#      dump all into the quickfix.
#   3) CTRL-M: toggle between fzf mode and riggrep mode
# NOTE:
#   -e/--regex is not supported
# EXAMPLES:
#   frgg -s "Foo", given some rg's options and the initial query
#   frgg "foo", just given the initial query
#   frgg, launch it directly

# Temp file to store the query when switch to another mode so that the query can
# be restored when switch back.

[ -n "$SSH_CLIENT" ] && {
    open=less
} || {
    open=xdg-open
}

if [ "$(uname -o)" = "Cygwin" ]; then
  open() {
    for f in $@; do
      cygstart "$(cygpath -w $f)"
    done
  }
fi

rg_query=$(mktemp -t frggr.XXXXXXXXXX)
fzf_query=$(mktemp -t frggf.XXXXXXXXXX)
# Temp file to mark if the current mode is fzf mode
fzf_mode_enabled=$(mktemp -t frggm.XXXXXXXXXX)
cleanup() {
  rm -f "$rg_query";
  rm -f "$fzf_query";
  rm -f "$fzf_mode_enabled";
}
trap cleanup EXIT

# Path for the file where all selected entries are saved and they will be fed to
# the quickfix.
errorfile_path="$HOME/.local/share/rg"
[[ ! -e $errorfile_path ]] && mkdir -p "$errorfile_path"

[ "$1" = "-h" ] && {
  rg -h
  echo '============================================================'
  echo 'frgg -s "Foo" , given some rg options and the initial query'
  echo 'frgg "foo"    , just given the initial query'
  echo 'frgg          , launch it directly'
  exit 0
}

last_arg=${*: -1}
if [[ $last_arg =~ "^-" ]]; then
  initial_query=""
  extra_opts=$*
else
  initial_query="$last_arg"
  extra_opts="${*%%"$last_arg"}"
fi

if [[  $initial_query =~ frgg$ ]]; then
  initial_query=""
fi

rg_prefix="rg --line-number --column --color=always --smart-case --vimgrep $RG_EXCLUDE $extra_opts "

fzf \
  --height 100% \
  --ansi \
  --disabled \
  --query "$initial_query" \
  --bind "start:reload($rg_prefix {q})" \
  --bind "change:reload:sleep 0.1; $rg_prefix {q} || true" \
  --bind 'ctrl-t:transform:[[ ! $FZF_PROMPT =~ ripgrep ]] &&
    echo "rebind(change)+change-prompt(1. ripgrep> )+disable-search+transform-query:echo \{q} > $frgf_filename; cat $frgr_filename" ||
    echo "unbind(change)+change-prompt(2. fzf> )+enable-search+transform-query:echo \{q} > $frgr_filename; cat $frgf_filename"' \
  --prompt '1. ripgrep> ' \
  --delimiter : \
  --header 'â•±  CTRL-T: Switch between ripgrep|fzf / ctrl-o:open ctrl-e:vim enter:less / support rg argument: -s FOO /' \
  --preview='bat -n --color=always --style=numbers,changes,header --highlight-line {2} {1} 2>/dev/null || bat -n --color=always {1}' \
  --preview-window 'right,45%,+{2}+1/3,~1' \
  --bind 'enter:become(less {1})' \
  --bind "ctrl-o:execute($open {1})" \
  --bind "ctrl-e:execute(vim {1} +{2})"
