#!/usr/bin/env bash
# -*- +indent: 2 -*- Preview files and directories, originally sourced from [[https://github.com/gokcehan/lf/wiki/Ranger][rifle]]

# IFS=$'\n'
set -o pipefail -o noclobber -o noglob -o nounset

# ┌───────────────────────────────────────────────┐
# │ Parse Command Line Arguments and Setup Script │
# └───────────────────────────────────────────────┘

read -r -d '' USAGE <<EOF
Usage: preview [-h] [-v] [-l LANGUAGE] [-o HANDLER=ARGS]
               [-x POS] [-y POS] [-c COLS] [-r ROWS] PATH
EOF

read -r -d '' HELP <<EOF
$USAGE

A script inspired by rangers rifle that can preview files/directories
in your terminal.

Positional Arguments:
  PATH
    The path to the file/directory that's to be previewed. You can set
    this to - to force previewing of standard input.

Optional Arguments:
  -h
    Show this help message and exit.
  -l LANGUAGE
    Specify the language used for syntax highlighting PATH.
  -o HANDLER=EXTRA_ARGS
    Specify optional extensions for a preview handler (eg. bat).
  -v
    Don't suppress intermediate program output while running.
  -r ROWS
    Set the expected number of rows in the output display to ROWS.
  -c ROWS
    Set the expected number of columns in the output display to COLUMNS.
  -x POS, -y POS
    Specify the X, Y coordinates when performing an image preview using
    kitty.

Environment Variables:
  COLS, ROWS
    Defaults for the -c and -r optional arguments.
  TERM
    IF it ends in color, preview assumes we have at least 8-bit
    color support.
  MIMETYPE
    The mimetype of the file/stream we're trying to preview.
  INCLUDE_DIR
    When set to 1, directory previews include the directory path
    as a prefix to the directory contents.
EOF

verbose=0 language='' cols="${COLS:-}" rows="${ROWS:-}" X=0 Y=0
color=
case "$TERM" in
  # Assert whether curren terminal is true-color.
  *-color | *-256color | *-24bit) color=1 ;;
esac
declare -A options

while getopts 'hvl:x:y:r:c:o:' OPT; do
  case "$OPT" in
    h)
      echo "$HELP"
      exit 0
      ;;
    l) language="$OPTARG" ;;
    v) verbose=1 ;;
    c) cols="$OPTARG" ;;
    r) rows="$OPTARG" ;;
    x) X="$OPTARG" ;;
    y) Y="$OPTARG" ;;
    o)
      IFS='=' read -r -d '' key value <<<"$OPTARG"
      options["$key"]="$value"
      ;;
    \?)
      echo "$USAGE" >&2
      exit 1
      ;;
  esac
done
shift $((OPTIND - 1))

# Extract the PATH that we're trying to preview or fail.
if [ -z "$*" ]; then
  echo "error: preview: Must supply a path to preview." >&2
  echo "$USAGE" >&2
  exit 1
fi
FILE_PATH="$*"

[ "$verbose" -eq 0 ] && exec 2>/dev/null # Redirect standard error to null device.

# Detect display environment properties unless supplied by parent.
if [ -z "$cols" ] || [ -z "$rows" ] || [ -z "$color" ]; then
  read -d '' -r DCOLOR DCOLS DROWS <<<"$(echo -e 'colors\ncols\nlines\n' | tput -S)"
  if [ -z "$color" ]; then
    if [ "${DCOLOR:-0}" -ge 256 ]; then color=1; else color=0; fi
  fi
  [ -z "$cols" ] && cols="$DCOLS"
  [ -z "$cols" ] && rows="$DROWS"
fi

# ┌───────────────────────────────────────────┐
# │ Configure Preview Environment and Options │
# └───────────────────────────────────────────┘

PREVIEW_TABWIDTH=4              # Set the width of tabs when syntax highlighting a file
HTML_IS_PLAINTEXT=1             # When 1, don't try to convert html to plaintext (eg. md)
INCLUDE_DIR="${INCLUDE_DIR:-0}" # When 1, include the directory path when previewing directories

# ┌───────────────────────────────────┐
# │ Generic Previewers for File Nodes │
# └───────────────────────────────────┘

preview_dir_project() {
  if [ -e "$1/.git" ]; then
    onefetch --no-art --no-title --no-color-palette -- "$1"
  else
    false
  fi
}

preview_dir_contents() {
  list=$(ls "$1" --color=always --group-directories-first -1)
  if [ -n "$list" ]; then
    echo "$list"
  elif [ -n "$color" ]; then
    echo -e "\e[7mEmpty\e[27m"
  else
    echo "Empty"
  fi
}

preview_dir() {
  if [ "$INCLUDE_DIR" -eq 1 ]; then
    ls -d --color=always "$1"
    echo "${1//?/-}"
  fi

  preview_dir_project "$1" ||
    preview_dir_contents "$1"
}

preview_socket() {
  local fout
  if fout=$(fuser -uv "$1" 2>&1); then
    echo "$fout" && return 0
  fi
  losf -- "$1"
}

[ -d "$FILE_PATH" ] && preview_dir "$FILE_PATH" && exit 0
[ -S "$FILE_PATH" ] && preview_socket "$FILE_PATH" && exit 0

# ┌────────────────────────────┐
# │ Syntax Highlighter Proxies │
# └────────────────────────────┘

# The only supported syntax highlighter.
# The language argument mentioned above is meant to be the kind taken
# by bat, and you should assume if any later syntax highlighters are
# ever supported bat, $language will only work with bat.
highlight_bat() {
  # shellcheck disable=SC2086
  bat -p \
    --color "$(if [ "$color" -eq 1 ]; then echo always; else echo never; fi)" \
    --paging never \
    --tabs "$PREVIEW_TABWIDTH" \
    --theme 'an-old-hope' \
    --style plain \
    ${options[bat]:-} \
    "$@"
}

if [ -n "$language" ]; then
  # When given we assume bat has someway of handling FILE_PATH.
  highlight_bat -l "$language" -- "$FILE_PATH"
elif [ "$FILE_PATH" = '-' ]; then
  # Support for stdin is too varied to properly handle. I could
  # redirect it to a temporary file and then perform the remaining
  # checks on it but it's simpler just to hope bat has some way
  # of handling it.
  echo "warning: preview: It's recommended to supply the language type when FILE_PATH is stdin" >&2
  highlight_bat -- "$FILE_PATH"
else
  false
fi && exit 0

# ┌──────────────────────┐
# │ File Type Previewers │
# └──────────────────────┘

do_archive() {
  if [ "$#" -gt 1 ]; then
    atool --list --format "$2" -- "$1"
  else
    atool --list -- "$1"
  fi && return 0
  bsdtar --list --file "$1"
}

do_rar() { unrar lt -p- -- "$1"; } # Avoid password prompt by providing empty password
do_7z() { 7z l -p -- "$1"; }       # Avoid password prompt by providing empty password

do_pdf() {
  pdftotext -l 10 -nopgbrk -q -- "$1" - | fmt -w "$cols" && return
  mutool draw -F txt -i -- "$1" 1-10 | fmt -w "$cols" && return
  exiftool "$1"
}

do_torrent() {
  transmission-show -- "$1" && return
}

do_opendoc() {
  odt2txt "$1" && return                  # Preview as text conversion
  pandoc -s -t markdown -- "$1" && return # Preview as markdown conversion
}

do_xlsx() {
  xlsx2csv -- "$1" && return # Preview as csv conversion using [[https://github.com/dilshod/xlsx2csv][xlsx2csv]].
}

do_json() {
  if [ "$color" -eq 1 ]; then
    jq --color-output . -- "$1"
  else
    jq -- "$1"
  fi && return 0
  highlight_bat -l json -- "$1"
  python -m json.tool -- "$1" && return
}

do_text() {
  highlight_bat -- "$1" && return
  cat "$1"
}

do_html() {
  if [ "$HTML_IS_PLAINTEXT" -eq 1 ]; then
    do_text "$1"
  else
    w3m -dump "$1" && return
    lynx -dump -- "$1" && return
    elinks -dump "$1" && return
    pandoc -s -f html -t markdown -- "$1" |
      if command -v bat >/dev/null 2>&1; then
        highlight_bat -l md - "$@"
      else
        cat "$@"
      fi
  fi
}

do_DSDIFF() {
  # WARN Direct Stream Digital/Transfer (DSDIFF) and wavpack aren't detected
  # by file(1).
  mediainfo "$1" && return
  exiftool "$1"
}

[ -n "${KITTY:-}" ] && kitty +kitten icat --clear --transfer-mode file --silent
do_img() {
  if [ -n "${KITTY:-}" ]; then
    kitty +kitten icat --transfer-mode file --silent --place "${COLS}x${ROWS}@${X}x${Y}" "$1" && return
  fi
  exiftool "$1" && return
  viu -- "$1" && return
  img2txt --gamma=0.6 -- "$1"
}

do_epub() {
  pandoc -f epub -t plain "$1" && return
  einfo -p "$1"
}

do_video() {
  mediainfo "$1" && return
  exiftool "$1"
}

do_sqlite3() {
  sqlite3 "$1" '.dump' |
    highlight_bat -l sql
}

do_exe() {
  do_fallback "$1"
  echo ""
  hexdump --color=always -C -- "$1" && return
  xxd -- "$1" && return
}

do_iso() {
  isoinfo -l -i -- "$FILE_PATH"
}

do_fallback() {
  echo '----- File Type Classification -----'
  file --dereference --brief -- "$1"
}

do_python_bytecode() {
  # Disassembles pythons pyc files. Adapted from [[https://stackoverflow.com/a/42720524/6247387][here]] and [[https://stackoverflow.com/a/25129042/6247387][here]].
  python3 - "$1" <<-EOF | highlight_bat -l asm -
import marshal
import dis
import sys
import struct
import binascii
import time
import platform

with open(sys.argv[1], 'rb') as fd:
    magic = fd.read(4)
    timestamp = fd.read(4)
    size = None
    if sys.version_info.major == 3 and sys.version_info.minor >= 3:
         size = fd.read(4)
    if sys.version_info.major == 3 and sys.version_info.minor >= 7:
         bit_field = timestamp
         timestamp = size
         size = fd.read(4)
    size = struct.unpack('I', size)[0]

    code = marshal.load(fd)

    magic = binascii.hexlify(magic).decode('utf-8')
    timestamp = time.asctime(time.localtime(struct.unpack('I', b'D\xa5\xc2X')[0]))

    print(f'# {"-" * 76} #')
    print(f'# Python version: {platform.python_version()}'.ljust(78) + ' #')
    print(f'# Magic code: {magic}'.ljust(78) + ' #')
    print(f'# Timestamp: {timestamp}'.ljust(78) + ' #')
    print(f'# Size: {size}'.ljust(78) + ' #')
    print(f'# {"-" * 76} #\n')

    dis.disassemble(code,)
EOF
}

# do_emacs_bytecode() {
#   # Adapted from [[https://emacs.stackexchange.com/questions/35936/disassembly-of-a-bytecode-file][here]].
#   emacs --batch \
#         --eval '(require (quote cl-print))' \
#         --eval '
# (defun disassemble-file (filename)
#   (let ((inbuf (find-file-noselect filename)))
#     (with-current-buffer inbuf
#       (goto-char (point-min)))
#     (with-current-buffer (get-buffer-create "*file disassembly*")
#       (erase-buffer)
#       (condition-case ()
#           (cl-loop with cl-print-compiled = (quote disassemble)
#                    for expr = (read inbuf)
#                    do (pcase expr
#                         (`(byte-code ,(pred stringp) ,(pred vectorp) ,(pred natnump))
#                          (princ "TOP-LEVEL byte code:\n" (current-buffer))
#                          (disassemble-1 expr 0))
#                         (_ (cl-prin1 expr (current-buffer))))
#                    do (terpri (current-buffer)))
#         (end-of-file nil))
#       (goto-char (point-min))
#       (princ (buffer-substring (point-min) (point-max))))))
# ' \
#         --eval '(disassemble-file (pop argv))' \
#         "$1"
# }

do_java_class() {
  javap -private -c "$1" |
    sed 1d |
    highlight_bat --language java -
}

do_riff() {
  rifftree -s -- "$1"
}

# ┌────────────────────────┐
# │ Extension Associations │
# └────────────────────────┘

FILE_EXTENSION="${FILE_PATH##*.}"
FILE_EXTENSION=$(tr '[:upper:]' '[:lower:]' <<<"$FILE_EXTENSION")

case "$FILE_EXTENSION" in
  a | ace | alz | arc | arj | bz | bz2 | cab | cpio | deb | gz | jar | lha | lz | lzh | lzma | lzo | \
    rpm | rz | t7z | tar | tbz | tbz2 | tgz | tlz | txz | tZ | tzo | war | xpi | xz | Z | zip | zst)
    do_archive "$FILE_PATH"
    ;;
  rar | cbr) do_rar "$FILE_PATH" ;;
  cb7 | c7z | 7z) do_7z "$FILE_PATH" ;;
  # Many archive programs don't seem to recognise comic book extensions.
  cbz) do_archive "$FILE_PATH" zip ;;
  cbt | gem) do_archive "$FILE_PATH" tar ;;
  cba) do_archive "$FILE_PATH" ace ;;

  pdf) do_pdf "$FILE_PATH" ;;
  torrent) do_torrent "$FILE_PATH" ;;
  odt | ods | odp | sxw) do_opendoc "$FILE_PATH" ;;
  xlsx) do_xlsx "$FILE_PATH" ;;
  epub) do_epub "$FILE_PATH" ;;
  htm | html | xhtml) do_html "$FILE_PATH" ;;
  json | ipynb*) do_json "$FILE_PATH" ;;
  dff | dsf | wv | wvc) do_DSDIFF "$FILE_PATH" ;;
  sqlite | sqlite3) do_sqlite3 "$FILE_PATH" ;;
  pyc) do_python_bytecode "$FILE_PATH" ;;
  # elc)             do_emacs_bytecode "$FILE_PATH" ;;
  class) do_java_class "$FILE_PATH" ;;
  mp3) do_video "$FILE_PATH" ;;
  idx) do_riff "$FILE_PATH" ;;
  iso) do_iso "$FILE_PATH" ;;

  md) highlight_bat -l markdown -- "$FILE_PATH" ;;
  csv) highlight_bat -l csv -- "$FILE_PATH" ;;
  el) highlight_bat -l lisp -- "$FILE_PATH" ;;
  org) highlight_bat -l orgmode -- "$FILE_PATH" ;;

  *) false ;;
esac && exit 0

# ┌───────────────────────┐
# │ Mimetype Associations │
# └───────────────────────┘

[ -n "${MIMETYPE:-}" ] || MIMETYPE=$(file --dereference --brief --mime-type -- "$FILE_PATH")
case "$MIMETYPE" in
  */json) do_json "$FILE_PATH" ;;
  */html) do_html "$FILE_PATH" ;;
  */javascript) highlight_bat -l typescript -- "$FILE_PATH" ;;
  *sqlite3) do_sqlite3 "$FILE_PATH" ;;

  # Generic classifications
  video/* | audio/*) do_video "$FILE_PATH" ;;
  image/*) do_img "$FILE_PATH" ;;
  *executable) do_exe "$FILE_PATH" ;;
  text/* | */xml) do_text "$FILE_PATH" ;;
  message/*) highlight_bat -l email -- "$FILE_PATH" ;;

  *) false ;;
esac && exit 0

# ┌──────────────────┐
# │ Fallback Preview │
# └──────────────────┘
do_fallback "$FILE_PATH"
