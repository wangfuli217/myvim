Unity是一个单元测试框架。我们的目标是保持它的规模和功能。核心的Unity测试框架有三个文件:一个C文件和两个头文件。它们共同提供函数和宏，使测试更容易。

src - 这是您关心的代码!此文件夹包含一个C文件和两个头文件。这三个文件是统一的。
docs - 您正在阅读此文档，因此您可能已经找到了进入此文件夹的方法。在这里可以找到所有方便的文档。
examples - 这包含了一些使用Unity的例子。
extras - 这些附加功能不是核心项目的一部分，是可选的。
test - 这就是Unity及其脚本测试的方式。如果你只是使用Unity，你可能永远都不需要进入这里。如果您是幸运的团队成员，可以将Unity移植到一个新的工具链，这是一个验证所有配置是否正确的好地方。
auto - 在这里你会发现有用的Ruby脚本来简化你的测试工作流程。它们纯粹是可选的，不需要使用Unity。


测试文件将包括setUp()和tearDown()函数。
    setUp函数可以包含您希望在每次测试之前运行的任何内容。
    tearDown函数可以包含您希望在每次测试之后运行的任何内容。
这两个函数都不接受参数，也不返回任何东西。如果你不需要它们，你可以把它们中的一个或两个都留空。

文件的大部分将是一系列测试函数。测试函数遵循以 test_ 或 spec_ 开头的惯例。测试函数不接受任何参数，也不返回任何结果。所有的测试会计都在Unity内部处理。
在测试文件的底部，您将编写一个main()函数。这个函数将调用UNITY_BEGIN()，然后为每个测试调用RUN_TEST，最后调用UNITY_END()。

    记住要将每个测试添加到主函数中可能会很繁琐。如果您喜欢在构建过程中使用帮助脚本，您可以考虑使用我们的便利的generate_test_runner.rb脚本。
这将为您创建主函数和所有调用，假设您已经遵循了建议的命名约定。在这种情况下，根本不需要在测试文件中包含主函数。

1. 运行测试函数
RUN_TEST(func)
2. 忽略测试函数
TEST_IGNORE()
TEST_IGNORE_MESSAGE("message")
3. 流产的测试 -> 如果MyTest调用TEST_ABORT，程序控制将立即返回TEST_PROTECT，返回值为0。
TEST_PROTECT()  设置并捕获宏
TEST_ABORT()    中止测试系统
4. 函数测试错误
TEST_FAIL()
TEST_FAIL_MESSAGE("message")
5. 函数测试通过
TEST_PASS()
TEST_PASS_MESSAGE("message")
6. 提示消息
TEST_MESSAGE(message)