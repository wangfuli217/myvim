snippet header
#!/bin/bash
set -euxo pipefail
# e : fail as soon as a command fails, don't continue
# u : fail if nonexisting variable can't be expanded
# x : echo each line as it's executed
# -o pipefail: fail if a command in a pipe returns status != 0

endsnippet


snippet heredoc "echo <<HEREDOC" !b
cat <<HEREDOC
${1:Some multiline message here like explained in http://www.tldp.org/LDP/abs/html/here-docs.html}
HEREDOC
endsnippet


snippet funcdebug "function debug() {}" !b
function debug() {
    [ -n "$debug" ] && echo "$0 debug: $@"
}
$0
endsnippet

snippet debug "debug echo" !b
debug "Using HOME=${HOME}"
endsnippet

snippet *
* * * * *
endsnippet

snippet cron
#   *       *       *            *               *
# 0-59m | 0-23h | 1-31d | 1-12 (Jan-Dec) | 1-6 (Mon-Sat) | user /path/to/command

* * * * *
endsnippet

## read a 'file'
snippet <> "Read command's output"
while IFS= read -r
do
   ${1:"\$REPLY"}
done < <($2)
endsnippet

snippet <> "Read find's output"
while IFS= read -r -d \$'\0'
do
   ${1:"\$REPLY"}
done < <(find ${2:/} -xdev $3 -print0)
endsnippet

snippet <> "Read a heredoc"
while IFS= read -r ${1:line}
do
   [[ $$1 = \#* ]] && continue
   echo "$$1"
done << EOF
$2
EOF
endsnippet

## if
snippet if "Commands" !
if ${1:commands}
then
   ${2:commands}
fi
endsnippet

snippet if "String comparison"
if [[ ${1:'test'} ${2:==} ${3:\$right_operand} ]]
then
   ${4:commands}
fi
endsnippet

snippet if "Digit comparison"
if (( ${1:0} ${2:<} ${3:j} ))
then
   ${4:commands}
fi
endsnippet

## Loops
snippet for "for variable in words" !
for ${1:i} in ${2:"\$@"}
do
   ${3:echo} "\$$1"
done
endsnippet

snippet for "for variable in range"
for ${1:i} in \{${2:start}..${3:end}}
do
   ${4:echo} "\$$1"
done
endsnippet

snippet for "C-like for"
for ((${1:i} = ${2:0}; $1 < ${3:10}; $1++))
do
   ${4:commands}
done
endsnippet

snippet while
while ${1:command}
do
   ${2:commands}
done
endsnippet

snippet until
until ${1:command}
do
   ${2:commands}
done
endsnippet

snippet getopts
OPTIND=1

local opt
while getopts :$1 opt
do
   case "$opt" in
       $2) $3 ;;
      \?) echo "Invalid option: -$OPTARG" 1>&2
          return 1 ;;
       :) echo "Option -$OPTARG requires an argument" 1>&2
          return 2 ;;
   esac
   [[ $OPTARG == -* ]] && { echo "No dashes allowed in -$opt's argument" 1>&2; return 3; }
done

shift "$((OPTIND-1))"
endsnippet