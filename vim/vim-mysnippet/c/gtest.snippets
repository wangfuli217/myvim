snippet gtest "gtest (test)"
TEST(${1:TestSuite}, ${2:FunctionWorks}) {
	${3:/* test body */}
}
endsnippet

snippet gtest_suite "gtest (suite)"
class ${1:TestSuite} : public ::testing::Test {
  protected:
	/* data */
};

TEST_F($1, ${3:FunctionWorks}) {
	/* test body */
}
endsnippet

snippet gtest_suite_full "gtest (suite full)"
class ${1:TestSuite} : public ::testing::Test {
  protected:
    void SetUp() override {
		/* setup body */
	}

    void TearDown() override {
		/* teardown body */
	}
	/* data */
};

TEST_F($1, ${3:FunctionWorks}) {
	/* test body */
}
endsnippet

snippet gtest_value_param "gtest (value param)"
class ${1:TestSuite} : public ::testing::TestWithParam<${2:Type}> {
  protected:
	${6:// You can implement all the usual fixture class members here.
	// To access the test parameter, call GetParam() from class
	// TestWithParam<T>.}
};

TEST_P($1, ${3:FunctionWorks}) {
	${7:// Inside a test, access the test parameter with the GetParam() method
	// of the TestWithParam<T> class:
	EXPECT_TRUE(foo.Blah(GetParam()));
	...}
}

INSTANTIATE_TEST_SUITE_P(
	${4:InstantiationName},
	$1,
	::testing::${5:Range(begin, end)/Values(v1, ... vN)/ValuesIn(container)/Bool()/Combine()});
endsnippet

snippet gtest_typed_test "gtest (typed test)"
template <typename T>
class ${1:TestSuite} : public ::testing::Test {
  protected:
	/* data */
};

using ${2:MyTypes} = ::testing::Types<${3:list of types}>;

TYPED_TEST_CASE($1, $2);

TYPED_TEST($1, ${4:FunctionWorks}) {
	${5:// Inside a test, refer to the special name TypeParam to get the type
	// parameter.  Since we are inside a derived class template, C++ requires
	// us to visit the members of FooTest via 'this'.
	TypeParam n = this->value_;
	// To visit static members of the fixture, add the 'TestFixture::'
	// prefix.
	n += TestFixture::shared_;
	// To refer to typedefs in the fixture, add the 'typename TestFixture::'
	// prefix.  The 'typename' is required to satisfy the compiler.
	typename TestFixture::List values;
	values.push_back(n);
	...}
}
endsnippet

snippet gtest_main "gtest() (main)"
#include <gtest/gtest.h>

int main(int argc, char* argv[]) {
	::testing::InitGoogleTest(&argc, argv);
	return RUN_ALL_TESTS();
}
endsnippet

snippet gmock_main "gmock() (main)"
#include <gtest/gtest.h>
#include <gmock/gmock.h>

int main(int argc, char* argv[]) {
	::testing::InitGoogleMock(&argc, argv);
	return RUN_ALL_TESTS();
}
endsnippet

snippet etrue "EXPECT_TRUE" b
EXPECT_TRUE(${1:expr});$0
endsnippet

snippet efalse "EXPECT_FALSE" b
EXPECT_FALSE(${1:expr});$0
endsnippet

snippet eeq "EXPECT_EQ" b
EXPECT_EQ(${1:expr}, ${2:expr});$0
endsnippet

snippet ene "EXPECT_NE" b
EXPECT_NE(${1:expr}, ${2:expr});$0
endsnippet

snippet elt "EXPECT_LT" b
EXPECT_LT(${1:expr}, ${2:expr});$0
endsnippet

snippet ele "EXPECT_LE" b
EXPECT_LE(${1:expr}, ${2:expr});$0
endsnippet

snippet egt "EXPECT_GT" b
EXPECT_GT(${1:expr}, ${2:expr});$0
endsnippet

snippet ege "EXPECT_GE" b
EXPECT_GE(${1:expr}, ${2:expr});$0
endsnippet

snippet atrue "ASSERT_TRUE" b
ASSERT_TRUE(${1:expr});$0
endsnippet

snippet afalse "ASSERT_FALSE" b
ASSERT_FALSE(${1:expr});$0
endsnippet

snippet aeq "ASSERT_EQ" b
ASSERT_EQ(${1:expr}, ${2:expr});$0
endsnippet

snippet ane "ASSERT_NE" b
ASSERT_NE(${1:expr}, ${2:expr});$0
endsnippet

snippet alt "ASSERT_LT" b
ASSERT_LT(${1:expr}, ${2:expr});$0
endsnippet

snippet ale "ASSERT_LE" b
ASSERT_LE(${1:expr}, ${2:expr});$0
endsnippet

snippet agt "ASSERT_GT" b
ASSERT_GT(${1:expr}, ${2:expr});$0
endsnippet

snippet age "ASSERT_GE" b
ASSERT_GE(${1:expr}, ${2:expr});$0
endsnippet