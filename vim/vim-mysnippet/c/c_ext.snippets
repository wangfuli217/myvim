snippet hello "hello world demo" b
#include <stdio.h>

int main(int argc, char *argv[])
{
    printf("Hello ${1:World}!\n");
    return 0;
}
endsnippet

snippet realloc "realloc memory" b
void *${3:tmp} = realloc(${1:data}, ${2:size});
if ($3) {
    /* realloc succeeded, assign new pointer */
    $1 = $3;
} else {
    ${0:/* handle error */}
}
endsnippet

snippet getopts "getopt example structure" b
int opt;
int flags;
while ((opt = getopt(argc, argv, "nt:")) != -1) {
    switch (opt) {
    case 'n':
        flags = 1;
        break;
    case 't':
        nsecs = atoi(optarg);
        break;
    default: /* '?' */
        fprintf(stderr, "Usage: %s [-t nsecs] [-n] name\n", argv[0]);
        exit(EXIT_FAILURE);
    }
}
endsnippet

snippet gpl "GPL License Header" b
/*
 *  Copyright (C) 2014 Gerhard Gappmeier <gappy1502@gmx.net>
 *
 *  This file is part of ${1:programname}.
 *
 *  $1 is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  $1 is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with $1. If not, see <http://www.gnu.org/licenses/>.
 */
endsnippet

snippet printf_dbg "[snippet] generic printf debug"
${1:printf}("${2}%s: %d\n", __func__, __LINE__);
endsnippet

snippet printf "[snippet] print basic function"
printf("${1:%s}\n"${2});
endsnippet

snippet fprintf "[snippet] fprint basic function"
fprintf(${1:stderr}, "${2:%s}\n"${3});
endsnippet

snippet inc_sys "[snippet] include with <...>"
#include <${1:stdio}.h>
endsnippet

snippet inc_quote "[snippet] include with '...'"
#include "${1:stdio}.h"
endsnippet

snippet _hex_dump "[snippet] call hex_dump function"
hex_dump("${1:name_buffer}", ${2:buffer}, ${3:sizeof($2)});
endsnippet

snippet hex_dump "[snippet] define hex_dump function"
static void hex_dump(char *name_buffer, void *buffer, int len) {
    int i;
    unsigned char buff[17];
    unsigned char *pc = (unsigned char*)buffer;

    /* output buffer if given */
    if (name_buffer != NULL)
        ${1:printf}("%s:\n", name_buffer);

    if (len == 0) {
        $1("  ZERO LENGTH\n");
        return;
    }

    if (len < 0) {
        $1("  NEGATIVE LENGTH: %i\n", len);
        return;
    }

    /* process every byte in the data */
    for (i = 0; i < len; i++) {
        /* multiple of 16 means new line (with line offset) */

        if ((i % 16) == 0) {
            /* just don't print ASCII for the zeroth line */
            if (i != 0)
                $1("  %s\n", buff);

            /* output the offset */
            $1("  %04x ", i);
        }

        /* now the hex code for the specific character */
        $1(" %02X", pc[i]);

        /* and store a printable ASCII character for later */
        if ((pc[i] < 0x20) || (pc[i] > 0x7e))
            buff[i % 16] = '.';
        else
            buff[i % 16] = pc[i];
        buff[(i % 16) + 1] = '\0';
    }

    /* pad out last line if not exactly 16 characters */
    while ((i % 16) != 0) {
        $1("   ");
        i++;
    }

    /* and print the final ASCII bit */
    $1("  %s\n", buff);
}
endsnippet