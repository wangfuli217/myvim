# $Id: vim-keys.conf,v 1.2 2010-09-18 09:36:15 nicm Exp $
#
# vim-keys.conf, v1.2 2010/09/12
#
# By Daniel Thau.  Public domain.
#
# This configuration file binds many vi- and vim-like bindings to the
# appropriate tmux key bindings.  Note that for many key bindings there is no
# tmux analogue.  This is intended for tmux 1.3, which handles pane selection
# differently from the previous versions
# https://github.com/Louiszhai/tmux ==> http://louiszhai.github.io/2017/09/30/tmux/
#

# set-option default-path "$PWD"
############### prefix key (Ctrl+a) ###############
# set -g prefix ^a
# unbind ^b
# bind a send-prefix
bind 0  last-window
bind o  last-pane

############### pane ###############
# split windows like vim
# vim's definition of a horizontal/vertical split is reversed from tmux's
bind s split-window -v
bind v split-window -h
bind | split-window -c "#{pane_current_path}" -h
bind - split-window -c "#{pane_current_path}" -v

# move around panes with hjkl, as one would in vim after pressing ctrl-w
# 定义上下左右键为hjkl键
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
# 定义面板边缘调整的^k ^j ^h ^l快捷键
bind -r ^k resizep -U 10 # upward (prefix Ctrl+k)
bind -r ^j resizep -D 10 # downward (prefix Ctrl+j)
bind -r ^h resizep -L 10 # to the left (prefix Ctrl+h)
bind -r ^l resizep -R 10 # to the right (prefix Ctrl+l)
# resize panes like vim
# feel free to change the "1" to however many lines you want to resize by, only
# one at a time can be slow
bind < resize-pane -L 3
bind > resize-pane -R 3
bind - resize-pane -D 3
bind + resize-pane -U 3

bind F10 select-window -t :=10
bind F1 select-window -t :=11
bind F2 select-window -t :=12
bind F3 select-window -t :=13
bind F4 select-window -t :=14
bind F5 select-window -t :=15
bind F6 select-window -t :=16
bind F7 select-window -t :=17
bind F8 select-window -t :=18
bind F9 select-window -t :=19

# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# 定义交换面板的键
bind ^u swap-pane -U
bind ^d swap-pane -D

# bind F11 tmux last-pane; tmux resize-pane -Z
# bind b split-window "tmux lsw | percol --initial-index $(tmux lsw | awk '/active.$/ {print NR-1}') | cut -d':' -f 1 | tr -d '\n' | xargs -0 tmux select-window -t"
# bind B split-window "tmux ls | percol --initial-index $(tmux ls | awk \"/^$(tmux display-message -p '#{session_name}'):/ {print NR-1}\") | cut -d':' -f 1 | tr -d '\n' | xargs -0 tmux switch-client -t"

bind b      last-window
bind-key 'c-b' run-shell 'tmux last-pane; tmux resize-pane -Z'
############### exetend ###############
# 绑定重载 settings 的热键 @ command-prompt  tmux exec
bind r source-file ~/.tmux.conf \; display-message "Config reloaded.."
# bind m command-prompt   -p "man page:" "split-window 'exec man %%'"

bind-key m set -g mouse on
bind-key ^m set -g mouse off

bind / command-prompt   -p "man page:" "split-window 'exec man %%'"
bind 'H' command-prompt -p "out cmd:"  "split-window 'exec %% | less'"
bind 'h' command-prompt -p "cmd help:" "split-window 'exec %% --help | less'"
bind % command-prompt   -p "perldoc"   "split-window 'exec perldoc -t %%'"
bind-key t run-shell 'tmux last-pane; tmux resize-pane -Z'
# bind @ command-prompt "splitw 'exec perldoc -t -f %%'"
# bind * command-prompt "splitw 'exec perldoc -t -v %%'"
# bind % command-prompt "splitw 'exec perldoc -t %%'"
# bind r command-prompt "rename-window %%"

# bind : to command-prompt like vim
# this is the default in tmux already
bind : command-prompt

# renumber windows when one closes
set -g renumber-windows on

set-window-option -g mode-keys vi  # 查看历史输入时的翻页、移动光标、切换选择窗口等方向键绑定使用 vi 模式，原默认是 emacs 模式
# vi-style controls for copy mode
setw -g mode-keys vi
set -g status-keys emacs
bind Escape copy-mode # 绑定esc键为进入复制模式
bind-key C-c run-shell 'tmux save-buffer - | reattach-to-user-namespace pbcopy'
bind-key C-v run-shell 'reattach-to-user-namespace pbpaste | tmux load-buffer - \; paste-buffer -d'
# bind b list-buffers
# bind p paste-buffer

############### window/pane index ###############
# 设置window的起始下标为1
set -g base-index 1
# 设置pane的起始下标为1
set -g pane-base-index 1

############### 256color ###############
set -g default-terminal "screen-256color"
set -g display-time 3000
set -g history-limit 65535  # 窗口保存的历史内容行数
set -g escape-time 0
setw -g clock-mode-colour colour223

setw -g xterm-keys on           # 启动xterm兼容的键绑定
set -s escape-time 0            # 设置escape键响应位0s
set -sg repeat-time 300         # 设置键重复时间位300s
set -s focus-events on          #  启动焦点事件
set -g mouse off                 #  启动鼠标支持
set -sg exit-empty on           # 退出空会话
set -q -g status-utf8 on        #  启动utf-8支持
setw -q -g utf8 on              #  启动utf-8支持
set -g visual-activity off      # 禁用视觉, 监视器响铃
setw -g monitor-activity off    # 禁用视觉, 监视器响铃
setw -g monitor-bell off        # 禁用视觉, 监视器响铃

############### statusline ###############
# Mouse support - set to on if you want to use the mouse
# setw -g mode-mouse off
# set -g mouse-select-pane off
# set -g mouse-resize-pane off
# set -g mouse-select-window off

# Set the default terminal mode to 256color mode
# set -g default-terminal "screen-256color"

# enable activity alerts
setw -g monitor-activity on
set -g visual-activity on


############### statusline ###############
# see https://github.com/HariSekhon/DevOps-Bash-tools
set -g status-style "bg=black fg=brightgreen"

set -g status-right 'Continuum status: #{continuum_status}'
# set -wg window-status-format " #I:#W "
# setw -g window-status-current-format " #I:#W "

# window list - setting to red if panes are synchronized
# #I - window index
# #W - window name
setw -g window-status-current-format "#[bg=black fg=red][#{?pane_synchronized,#[bg=brightred fg=white],#[bg=black fg=brightblue]}#I* #W#[bg=black fg=red]]"
setw -g window-status-format         "#{?pane_synchronized,#[bg=brightred fg=white],#[bg=black fg=brightgreen]} #I #W"
# setw -g window-status-separator " "
set -wg window-status-separator ""

# see https://github.com/zuorn/tmux.conf/ overide https://github.com/HariSekhon/DevOps-Bash-tools
set -wg window-status-current-format " #I:#W#F " # 状态栏当前窗口名称格式(#I：序号，#w：窗口名称，#F：间隔符)
set -wg window-status-separator ""               # 状态栏窗口名称之间的间隔
set -wg window-status-current-style "bg=red"     # 状态栏当前窗口名称的样式
set -wg window-status-last-style "fg=blue"       # 状态栏最后一个窗口名称的样式

# Status Left
# set -g status-left "#[bg=black fg=green][ #[fg=magenta]#h #[bg=black fg=green] | #S | "
set -g status-left "#[bg=black fg=green][#[fg=magenta]@#I#[bg=black fg=green]|#S|"
set -g status-left-length 50

# Status Right
# #{battery_percentage} - Mac shows battery percentage at top right so don't need this
# #{online_status} - tmux-plugins/tmux-online-status - causes climbing duplicate status bars at bottom
# #(bash ~/.tmux/plugins/kube.tmux 250 magenta green) - may not have kubernetes, also expensive to re-execute this every 5 secs
# Continuum: #{continuum_status}
set -g status-right "#[bg=black fg=green]| %H:%M %d/%b/%Y ]"

set -g message-style "bg=#202529, fg=#91A8BA"

set -g status-bg colour235
set -g status-fg colour248
# Center the window list
# set -g status-justify centre

# set -g status-left "
# set -g status-left-attr bright
# set -g status-left-length 20
#[fg=colour174]#(/home/xiaodong/bin/uptime) #[default]? #[fg=colour174]#(cut -d ' ' -f 1-3 /proc/loadavg)"
# set -g status-right "
# set -g status-right-length 80

#setw -g window-status-alert-attr bold
#setw -g window-status-alert-fg colour255
#setw -g window-status-alert-bg colour160


############### plugin ###############
# plugin-manager
# set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
# plugins
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @resurrect-save    'S' # 修改保存指令为S
# set -g @resurrect-restore 'R' 修改恢复指令为R
# 修改会话数据的保持路径，此处不能使用除了$HOME, $HOSTNAME, ~之外的环境变量
set -g @resurrect-dir '~/tmux/'

# load-plugins-without-manager
run-shell ~/tmux/tmux-resurrect/resurrect.tmux
run-shell ~/tmux/tmux-continuum/continuum.tmux
# plugins-settings
set -g @resurrect-strategy-vim 'session' # for vim
set -g @resurrect-strategy-nvim 'session' # for neovim
set -g @continuum-save-interval '0'
set -g @continuum-restore 'on'
# set -g @continuum-save-interval '1440'    一天一次自动备份
# set -g @continuum-save-interval '0'       关闭自动备份
set -g @continuum-restore 'on' # 启用自动恢复
# set -g @continuum-boot-options 'fullscreen', Terminal自动全屏,tmux命令在Terminal中执行

# run-shell ~/tmux/tmux-logging/logging.tmux
# set -g history-limit 50000
# set -g @logging-path "${HOME}/.tmux"
# set -g @screen-capture-path "${HOME}/.tmux"

# 输出日志到桌面
bind P pipe-pane -o "cat >>~/tmux/#W.log" \; display "Toggled logging to ~/tmux/#W.log"
# run '~/.tmux/plugins/tpm/tpm'

run-shell ~/tmux/tmux-fzf/main.tmux
set -g @plugin 'sainnhe/tmux-fzf'
TMUX_FZF_LAUNCH_KEY="f"
TMUX_FZF_ORDER="pane|window|session|command|keybinding|clipboard|process"
TMUX_FZF_PANE_FORMAT="[#{window_name}] #{pane_current_command} #{pane_current_path}"
TMUX_FZF_MENU=\
"switch pane\n~/tmux/tmux-fzf/scripts/pane.sh switch\n"\
"kill process\n~/tmux/tmux-fzf/scripts/process.sh kill\n"

bind-key "i" run-shell -b "~/tmux/tmux-fzf/scripts/pane.sh switch"
TMUX_FZF_OPTIONS="-p -w 100% -h 95% -m"



