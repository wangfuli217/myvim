[+]
cc=gcc
cxx=g++
cflags=
cxflags=
cxxflags=
pcflags=


[vim-word-count]
command=:exec "'<,'>s/$(-word:string)//gn"
strip=1
slient=1


[vim-register-clear]
command=:exec ":let @$(-reg:a)=@_"
strip=1
slient=1

[netrw-252-tmux.conf]
command=:e sftp://192.168.100.252//home/wangfuli/.tmux.conf
strip=1
silent=1

[netrw-252-vimrc]
command=:e sftp://192.168.100.252//home/wangfuli/.vimrc
strip=1
silent=1


[netrw-252-bashrc]
command=:e sftp://192.168.100.252//home/wangfuli/.bashrc
strip=1
silent=1

[netrw-252-task_template.ini]
command=:e sftp://192.168.100.252//home/wangfuli/.vim/task_template.ini
strip=1
silent=1

[netrw-252-filename]
command=:e sftp://$(-host:192.168.100.252)//$(-filename:home/wangfuli/.vim/task_template.ini)
strip=1
silent=1


[skywind3000-preview-tag]
command=:PreviewTag $(VIM_CWORD)
strip=1
silent=1

[skywind3000-preview-file]
command=:PreviewFile $(VIM_CFILE)
strip=1
silent=1

[skywind3000-preview-signature]
command=:PreviewSignature $(VIM_CWORD)
strip=1
silent=1

[tpope-session-start]
command=:Obsess $(VIM_ROOT)/.session.vim
strip=1
silent=1

[tpope-session-stop]
command=:Obsess! $(VIM_ROOT)/.session.vim
strip=1
silent=1

[tpope-session-source]
command=:source $(VIM_ROOT)/.session.vim
strip=1
silent=1

[junegunn-highlight-limelight]
command=:Limelight!! $(-light:0.5)
strip=1
silent=1

[junegunn-highlight-limelight]
command=:Limelight!! $(-light:0.5)
strip=1
silent=1

[fzf-git-ls-files]
command=:GFiles!
silent=1
strip=1

[fzf-git-status]
command=:GFiles?!
silent=1
strip=1

[fzf-git-grep]
command=:FZFGGrep!
silent=1
strip=1

[fzf-open-buffers]
command=:Buffers!
silent=1
strip=1

[fzf-global-mru]
command=:Mru!
silent=1
strip=1

[fzf-buffer-mru]
command=:MruCwd!
silent=1

# https://vimcolorschemes.com/
[fzf-colors]
command=:Colors
silent=1
strip=1

[fzf-seoul-colors]
command=:let g:seoul256_background = $(-background:236) | :colo seoul256
silent=1
strip=1

[fzf-lines]
command=:Lines
silent=1
strip=1

[fzf-buffer-lines]
command=:BLines
silent=1
strip=1

# :Marks add preview windows
[fzf-marks]
command=:FZFMarks!
silent=1
strip=1

[fzf-tags]
command=:Tags
silent=1
strip=1

[fzf-buffer-tags]
command=:BTags
silent=1
strip=1

[fzf-windows]
command=:FZFWindows
silent=1
strip=1

[fzf-history-buffer]
command=:FZFHistory!
silent=1
strip=1

[fzf-history-command]
command=:History:
silent=1
strip=1

[fzf-command-config]
command=:Commands
silent=1
strip=1

[fzf-history-search]
command=:History/
silent=1
strip=1


[fzf-git-commits]
command=:Commits!
silent=1
strip=1

[fzf-git-buffer-commits]
command=:BCommits!
silent=1
strip=1

[fzf-commands]
command=:Commands
silent=1
strip=1

[fzf-helptags]
command=:Helptags!
silent=1
strip=1


[fzf-plug-help]
command=:PlugHelp
silent=1
strip=1

[fzf-plug-readme]
command=:FzReadme
silent=1
strip=1

[fzf-filetypes]
command=:Filetypes
silent=1
strip=1

[fzf-jumps]
command=:Jumps!
silent=1
strip=1

[fzf-quickfix-history]
command=:FzfQuiclfixHistory
silent=1
strip=1

[fzf-localfix-history]
command=:FzfQuiclfixLocalHistory
silent=1
strip=1

[fzf-quickfix]
command=:FZFQuickFix!
silent=1
strip=1

[fzf-localfix]
command=:FZFLocList!
silent=1
strip=1

[AsyncTaskEdit-local-rc]
command=:AsyncTaskEdit
silent=1
strip=1

[AsyncTaskEdit-global-rc]
command=:AsyncTaskEdit!
silent=1
strip=1

[AsyncTaskList-exhidden-rc]
command=:AsyncTaskList
silent=1
strip=1

[AsyncTaskList-inhidden-rc]
command=:AsyncTaskList!
silent=1
strip=1

[AsyncTaskMacro-conf]
command=:AsyncTaskMacro
silent=1
strip=1

[AsyncTaskLast-history]
command=:AsyncTaskLast
silent=1
strip=1

[AsyncTaskProfile-history]
command=:AsyncTaskProfile $(-project:&debug,&release)
silent=1
strip=1

[AsyncStop-kill-term]
command=:AsyncStop
silent=1
strip=1

[AsyncStop-kill-kill]
command=:AsyncStop!
silent=1
strip=1


[fzf-registers]
command=:Registers
silent=1
strip=1

[cscope-jump]
command=:call CscopeFindInteractive(expand('<cword>'))
silent=1
strip=1

[cscope-toggle]
command=:call ToggleLocationList()
silent=1
strip=1

[cscope-build]
command:c,cpp=find . -name "*.h" -o -name "*.c" -o -name "*.cc" > cscope.files; cscope -bkq -i cscope.files
cwd=$(VIM_ROOT)
notify=:call g:CscopeUpdate(".", "cscope.out")
output=terminal

[manual-cmd]
command=man -S 3:2:1 $(-cmd:bash)
strip=1

[yl-get]
command=get  "$(-filename:$(VIM_FILEPATH))"
strip=1

[yl-put]
command=put  "$(-filename:$(VIM_FILEPATH))"
strip=1

# FZF extend preview windows
[everywhere-registers-fzf]
command=:FZFFiles! ~/.vim/registers
cwd=/
silent=1
strip=1

[everywhere-registers-shared]
command=:call SaveRegister("$(-reg:a)")
cwd=/
silent=1
strip=1

[everywhere-registers-fetch]
command=:call RestoreRegister("$(-reg:a)")
cwd=/
silent=1
strip=1

[VimRegDeluxe-edit]
command=:call g:VimReg_Edit("$(-reg:a)")
cwd=/
silent=1
strip=1

# command       shell command, or vimscript (starting with :)
# silent=1:     quickfix window will not open automatically no matter g:asyncrun_open is set or not.
# notify=echo:  display a notification in the command line when task finished.
# output=terminal: use internal terminal.
#   pos=tab: open internal terminal in a new tab.
#   focus=0: prevent tab switching, you will remain in your last actived tab when task starts.
#   close=1: set to 1 to close the task terminal when task is finished
# output=quickfix: use internal quickfix.
# FZF extend preview windows
[FZF-fzf-cheatsheets]
command=:FZFFiles! ~/git/fzf-cheatsheets/cheatsheets
cwd=/
silent=1
strip=1

# FZF extend preview windows
[FZF-tasks]
command=:FZFFiles! ~/.vim/
cwd=/
silent=1
strip=1

# FZF extend preview windows
[FZF-neigh]
command=:FZFFiles! $(VIM_FILEDIR)
cwd=/
silent=1
strip=1

# FZF extend preview windows
[FZF-root-files]
command=:FZFFiles! $(VIM_ROOT)
cwd=$(VIM_ROOT)
silent=1
strip=1

# FZF extend preview windows
[FZF-root-locate]
command=:FZFLocate! $(VIM_ROOT)
cwd=$(VIM_ROOT)
silent=1
strip=1

[hex-xxd-x]
command=:%!xxd
cwd=$(VIM_ROOT)
silent=1
strip=1

[hex-xxd-r]
command=:%!xxd -r
cwd=$(VIM_ROOT)
silent=1
strip=1

[sudo-read]
command=:SudaRead
cwd=$(VIM_ROOT)

[sudo-write]
command=:SudaWrite
output=terminal
pos=TAB
cwd=$(VIM_ROOT)

[openwrt-mklastv]
command=(source ~/.bashrc > /dev/null 2>&1; mklastv $(-module:systemconf))
strip=1
notify=echo
output=quickfix

[openwrt-mklast]
command=(source ~/.bashrc > /dev/null 2>&1; mklast $(-module:systemconf))
strip=1
notify=echo
output=quickfix

[openwrt-mkall]
command=(source ~/.bashrc > /dev/null 2>&1; mkall)
strip=1
notify=echo
output=quickfix

[openwrt-mkpkg]
command=(source ~/.bashrc > /dev/null 2>&1; mkpkg)
strip=1
notify=echo
output=quickfix


[style-astyle]
command:c=astyle --style=google -j -J -s4 -c -xn -xb -xl -xk -xV -xf -xh -S -L -K -N -m0 -p -H -xg -k3 -W3 -xC96 -n -z2 -v -Q --mode=c "$(VIM_FILEPATH)"
output=terminal
notify=:edit
save=1

[style-indent]
command:c=indent -kr -i4 -ts4 -sob -ss -sc -npsl -pcs -bs -bad -bap --ignore-newlines -l96 -nut -npro -brf "$(VIM_FILEPATH)"
output=terminal
notify=:edit
save=1

[style-shfmt]
command:sh=shfmt -l -w -i 2 -ci "$(VIM_FILEPATH)"
notify=echo
save=1

[style-shellcheck]
command:sh=shellcheck "$(VIM_FILEPATH)"
notify=echo
save=1

# :%!python -m json.tool
[style-json]
command=:'<,'>!jq . "$(VIM_FILEPATH)"
notify=echo
strip=1
close=1
save=1

[space-expand]
# command=expand   -t 4 "$(VIM_FILEPATH)"
command:c=sed -i 's/\t/\ \ \ \ /g' "$(VIM_FILEPATH)"
output=terminal
slient=1
notify=:edit
save=1

[space-unexpand]
# command=unexpand -t 4 "$(VIM_FILEPATH)"
command=sed -i 's/\ \ \ \ /\t/g' "$(VIM_FILEPATH)"
output=terminal
slient=1
notify=:edit
save=1

[space-tab]
command=:'<,'>!perl -pi -e 's/\t/ q( ) x ( 4 - pos() %4 ) /ge'
output=terminal
slient=1
notify=:edit
save=1

[space-dos2unix]
command=dos2unix "$(VIM_FILEPATH)"
output=terminal
slient=1
notify=:edit
save=1

[space-unix2dos]
command=unix2dos "$(VIM_FILEPATH)"
output=terminal
slient=1
notify=:edit
save=1

[space-tail]
command=sed -i 's/\s*$//g' "$(VIM_FILEPATH)"
output=terminal
slient=1
notify=:edit
save=1

[space-u200e]
command=:%s/<Ctrl-v>u200e//g
output=terminal
slient=1
notify=:edit
save=1

# execute('%g/_LIBC/normal gcc') 
[comment-code]
command=:exec "%g/$(-word)/normal gcc"
output=quickfix
slient=1
notify=:edit
save=1

[comment-FILE-LINE]
command=:'<,'>g/__FILE__, __LINE__/normal gcc
output=terminal
slient=1
notify=:edit
save=1

[remove-code]
command=:exec "%g/$(-word)/normal dd"
output=quickfix
slient=1
notify=:edit
save=1

[remove-FILE-LINE]
command=:'<,'>g/__FILE__, __LINE__/normal dd
output=terminal
slient=1
notify=:edit
save=1

# :%s/^\n\+/\r/
[spaceline-2squeeze-range]
command=:'<,'>v/./,/./-j
output=terminal
slient=1
notify=:edit
save=1

# :%s/^\n\+/\r/
[spaceline-3squeeze-range]
command=:'<,'>s/^\n\{3}//
output=terminal
slient=1
notify=:edit
save=1

# :%s/^\n\+/\r/
[spaceline-delete-range]
command=:'<,'>v/\S/d
output=terminal
slient=1
notify=:edit
save=1

# :%s/^\n\+/\r/
[dupline-delete-range]
command=:'<,'>s/^\(.*\)\n\1$/\1/
output=terminal
slient=1
notify=:edit
save=1

# :%s/^\n\+/\r/
[line-number-range]
command=:'<,'>!cat -n
output=terminal
slient=1
notify=:edit
save=1

# :%s/^\n\+/\r/
[spaces-squeeze-range]
command=:'<,'>s/\v\s+/ /g
output=terminal
slient=1
notify=:edit
save=1

[transform-Word-uppercase]
command=:'<,'>s/\<./\u&/g
output=terminal
slient=1
notify=:edit
save=1

[transform-word-lowercase]
command=:'<,'>s/\<./\l&/g
output=terminal
slient=1
notify=:edit
save=1

[transform-Line-uppercase]
command=:'<,'>s/.*/\u&
output=terminal
slient=1
notify=:edit
save=1

[transform-line-lowercase]
command=:'<,'>s/.*/\l&
output=terminal
slient=1
notify=:edit
save=1

[transform-fan-jian]
command=:'<,'>Scn
output=terminal
slient=1
notify=:edit
save=1

[transform-jian-fan]
command=:'<,'>Tcn
output=terminal
slient=1
notify=:edit
save=1

# command:c,cpp=ctags -R -f tags --exclude=target --exclude=node_modules --exclude=build --exclude=dist --languages=C,C++,Rust,Python,Go,Java,JavaScript,TypeScript,sh .
[ctags-build]
command=:call Gutentags()
cwd=$(VIM_FILEDIR)
output=terminal
notify=:set tags+=$(VIM_FILEDIR)/tags

[ctags-add]
command=:bufdo set tags+=$(VIM_FILEDIR)/tags
cwd=$(VIM_FILEDIR)
output=terminal

[Doxygen-Comment]
command=:Dox
cwd=$(VIM_ROOT)
output=terminal

[Doxygen-License]
command=:DoxLic
cwd=$(VIM_ROOT)
output=terminal

[Doxygen-Author]
command=:DoxAuthor 
cwd=$(VIM_ROOT)
output=terminal

[Doxygen-undocument]
command=:DoxUndoc
cwd=$(VIM_ROOT)
output=terminal

[Doxygen-Block]
command=:DoxBlock
cwd=$(VIM_ROOT)
output=terminal

[cloc]
command=cloc --exclude-dir=_builds,.cache .
cwd=(VIM_ROOT)
notify=echo

[clazy]
command=find . -type d -name '.cache' -prune -o -type d -name '_builds' -prune -o -name '*.cpp' -print | xargs clazy-standalone -checks=level2 -p default/compile_commands.json
cwd=(VIM_ROOT)
notify=echo

[clang-tidy]
command=find . -type d -name '.cache' -prune -o -type d -name '_builds' -prune -o -name '*.cpp' -print | xargs clang-tidy -checks=level2 -p default/compile_commands.json
cwd=(VIM_ROOT)
notify=echo


[file-build]
command=echo unsupported filetype $(VIM_FILETYPE)
command:c,cpp/win32=gcc -O2 -Wall -fstrict-aliasing "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT).exe" -Id:/dev/local/mingw32/include -Ld:/dev/local/mingw32/lib $(+CFLAGS:) $(+LDFLAGS:) -msse3 -lgdi32 -lws2_32 -liphlpapi -ld3d9 -ld3dx9 -lcmocka -lgtest -lgmock -lstdc++ -lm -lwinmm -lshlwapi -ljemalloc
command:c,cpp/linux=gcc -O2 -Wall -fstrict-aliasing "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" $(+CFLAGS:) $(+LDFLAGS:) -lstdc++ -lm -msse3 -ldl -lpthread -std=gnu99
command:go/win32=go build -o "$(VIM_PATHNOEXT).exe" "$(VIM_FILEPATH)"
command:go/linux=go build -o "$(VIM_PATHNOEXT)" "$(VIM_FILEPATH)"
command:make/win32=mingw32-make -f "$(VIM_FILEPATH)"
command:make/linux=make -f "$(VIM_FILEPATH)"
command:emake=emake --abs --cfg=$(+econfig:) --profile=$(+profile:) --int=+ "$(VIM_FILEPATH)"
command:rust/win32=rustc "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT).exe"
command:rust/linux=rustc "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"
command:pascal=fpc -vb -FE"$(VIM_FILEDIR)" "$(VIM_FILEPATH)"
command:lex=flex -o "$(VIM_PATHNOEXT).yy.c" "$(VIM_FILEPATH)"
command:yacc=bison -d $(+yacc_flag:) -o "$(VIM_PATHNOEXT).$(+yacc_ext:c)" "$(VIM_FILEPATH)"
command:cs=$(+csc:csc) /nologo /fullpaths /out:"$(VIM_PATHNOEXT).exe" "$(VIM_FILEPATH)"
command:java=javac "$(VIM_FILENAME)" -d .
command:markdown=pandoc "$(VIM_FILEPATH)" -t pdf --pdf-engine=xelatex --toc -o "$(VIM_PATHNOEXT).pdf"
output=quickfix
auto=make
save=2

[file-build:gcc]
command:c=gcc -fmax-errors=20 -std=gnu11 -Wall -Wstrict-aliasing=1 -gdwarf-4 -pthread -lm "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"
command:cpp=g++ -fmax-errors=20 -D_GLIBCXX_DEBUG -std=c++20 -Wall -gdwarf-4 "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"

[file-build:clang]
command:c=clang -std=gnu11 -Wall -gdwarf-4 -pthread -lm "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"
command:cpp=clang++  -D_GLIBCXX_DEBUG -std=c++20 -Wall -gdwarf-4 "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"

[file-test:gcc]
command:cpp=g++ -fmax-errors=20 -std=c++20 -Wall -gdwarf-4  "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -lgtest -lgmock -lpthread

[file-test:clang]
command:cpp=clang++ -fmax-errors=20 -std=c++20 -Wall -Wstrict-aliasing=1 -gdwarf-4  "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -lgtest -lgmock -lpthread

[file-build-cjson]
command:c,cpp/linux=gcc -O2 -Wall -fstrict-aliasing "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" $(+CFLAGS:) $(+LDFLAGS:) -lstdc++ -lm -msse3 -ldl -lpthread -std=gnu99 -ljson-c
output=terminal
notify=echo
save=2

[file-build-libpcap]
command:c,cpp/linux=gcc -O2 -Wall -fstrict-aliasing "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" $(+CFLAGS:) $(+LDFLAGS:) -lstdc++ -lm -msse3 -ldl -lpthread -std=gnu99 -lpcap
output=terminal
notify=echo
save=2

[file-run]
command="$(VIM_FILEPATH)"
command:c,cpp=$(+wrapper_cpp:) "$(VIM_PATHNOEXT)"
command:pascal="$(VIM_PATHNOEXT)"
command:go="$(VIM_PATHNOEXT)"
command:python=$(+python:python) "$(VIM_FILENAME)"
command:python/linux=$(+python:python3) "$(VIM_FILENAME)"
command:make=make -f "$(VIM_FILENAME)" run
command:emake=emake -e --cfg=$(+econfig:) --profile=$(+profile:) --int=+ "$(VIM_FILENAME)"
command:javascript=node "$(VIM_FILENAME)"
command:typescript=deno run "$(VIM_FILENAME)"
command:java=java "$(VIM_FILENOEXT)"
command:sh=sh "$(VIM_FILENAME)"
command:lua=lua "$(VIM_FILENAME)"
command:perl=perl "$(VIM_FILENAME)"
command:ruby=ruby "$(VIM_FILENAME)"
command:zsh=zsh "$(VIM_FILENAME)"
command:bash=bash "$(VIM_FILENAME)"
command:fish=fish "$(VIM_FILENAME)"
command:php=php "$(VIM_FILENAME)"
command:erlang=escript "$(VIM_FILENAME)"
command:ps1=powershell -file "$(VIM_FILENAME)"
command:scala=scala "$(VIM_FILENAME)"
command:haskell=runhaskell "$(VIM_FILENAME)"
command:applescript=osascript "$(VIM_FILENAME)"
command:vim=:source %|echo 'sourced ' . expand('%')
command:vb=cscript /nologo "$(VIM_FILENAME)"
command:rust="$(VIM_PATHNOEXT)"
command:bxrc=bochs -q -f "$(VIM_FILENAME)"
command:odin=odin run "$(VIM_FILENAME)"
command:yacc="$(VIM_PATHNOEXT)"
command:html=:!!! "D:\Program Files\Opera\opera.exe" --allow-file-access-from-files "$(VIM_FILEPATH)"
command:protogen/win32=python C:/Share/vim/lib/protogen.py "$(VIM_FILEPATH)"
command:cs/win32="$(VIM_FILENOEXT).exe"
command:gpt=python3 ~/.vim/vim/lib/gptcoder.py -p "$(VIM_FILEPATH)"
command:gpt/win32=python C:/Share/vim/lib/gptcoder.py -p "$(VIM_FILEPATH)"
command:tmux       = tmux source-file "$(VIM_FILENAME)" \; display "Sourced $(VIM_FILENAME)"
command:markdown   = glow -p "$(VIM_FILENAME)"
output=terminal
cwd=$(VIM_FILEDIR)
save=2

[file-run-input]
command="$(VIM_FILEPATH)" < "$(-input:input)"
command:c,cpp="$(VIM_PATHNOEXT)" < "$(-input:input)"
command:java=java -cp  "$(VIM_ROOT)/build" "$(VIM_FILENOEXT)" < "$(-input:input)"
command:rust=cargo run < "$(-input:input)"
command:go="$(VIM_PATHNOEXT)" < "$(-input:input)"
command:python=python "$(VIM_FILENAME)" < "$(-input:input)"
command:make=make -f "$(VIM_FILENAME)" run < "$(-input:input)"
command:emake=emake -e "$(VIM_FILENAME)" < "$(-input:input)"
command:javascript=node "$(VIM_FILENAME)" < "$(-input:input)"
command:sh=sh "$(VIM_FILENAME)" < "$(-input:input)"
command:lua=lua "$(VIM_FILENAME)" < "$(-input:input)"
command:perl=perl "$(VIM_FILENAME)" < "$(-input:input)"
command:ruby=ruby "$(VIM_FILENAME)" < "$(-input:input)"
command:zsh=zsh "$(VIM_FILENAME)" < "$(-input:input)"
command:bash=bash "$(VIM_FILENAME)" < "$(-input:input)"
command:fish=fish "$(VIM_FILENAME)" < "$(-input:input)"
command:php=php "$(VIM_FILENAME)" < "$(-input:input)"
command:erlang=escript "$(VIM_FILENAME)" < "$(-input:input)"
command:ps1=powershell -file "$(VIM_FILENAME)" < "$(-input:input)"
command:scala=scala "$(VIM_FILENAME)" < "$(-input:input)"
command:haskell=ghci "$(VIM_FILENAME)" < "$(-input:input)"
command:applescript=osascript "$(VIM_FILENAME)" < "$(-input:input)"
output=terminal
cwd=$(VIM_FILEDIR)
save=2

[file-top-floaterm]
command=:FloatermNew --height=0.5 --width=1.0 --wintype=float --name=floaterm1 --position=top
output=terminal
cwd=$(VIM_FILEDIR)

[file-bottom-floaterm]
command=:FloatermNew --height=0.5 --width=1.0 --wintype=float --name=floaterm1 --position=bottom
output=terminal
cwd=$(VIM_FILEDIR)

[file-left-floaterm]
command=:FloatermNew --height=1.0 --width=0.5 --wintype=float --name=floaterm1 --position=left
output=terminal
cwd=$(VIM_FILEDIR)

[file-right-floaterm]
command=:FloatermNew --height=1.0 --width=0.5 --wintype=float --name=floaterm1 --position=right
output=terminal
cwd=$(VIM_FILEDIR)

[file-kill-floaterm]
command=:FloatermKill!
output=terminal
cwd=$(VIM_FILEDIR)

[repl-filetype]
command=:REPLToggle
output=terminal
cwd=$(VIM_FILEDIR)

[repl-bash-floaterm]
command=:FloatermNew --height=1.0 --width=0.5 --wintype=float --cwd=<buffer> --name="repl-bash" --title="repl-bash" --position=right bash
output=terminal
notify=:execute "noremap <leader>wf :'<,'>FloatermSend --name=repl-bash<CR>"
cwd=$(VIM_FILEDIR)

[repl-python2-floaterm]
command=:FloatermNew --height=1.0 --width=0.5 --wintype=float --cwd=<buffer> --name=repl-python2 --title=repl-python2 --position=right python2
output=terminal
notify=:execute "noremap <leader>wf :'<,'>FloatermSend --name=repl-python2<CR>"
cwd=$(VIM_FILEDIR)

[repl-python3-floaterm]
command=:FloatermNew --height=1.0 --width=0.5 --wintype=float --cwd=<buffer> --name=repl-python3 --title=repl-python3 --position=right python3
output=terminal
notify=:execute "noremap <leader>wf :'<,'>FloatermSend --name=repl-python3<CR>"
cwd=$(VIM_FILEDIR)

[repl-perl-floaterm]
command=:FloatermNew --height=1.0 --width=0.5 --wintype=float --cwd=<buffer> --name="repl-perl" --title="repl-perl" --position=right reply
output=terminal
notify=:execute "noremap <leader>wf :'<,'>FloatermSend --name=repl-perl<CR>"
cwd=$(VIM_FILEDIR)

[repl-javascript-floaterm]
command=:FloatermNew --height=1.0 --width=0.5 --wintype=float --cwd=<buffer> --name="repl-javascript" --title="repl-javascript" --position=right node
output=terminal
notify=:execute "noremap <leader>wf :'<,'>FloatermSend --name=repl-javascript<CR>"
cwd=$(VIM_FILEDIR)

[file-fzf-floaterm]
command=:FloatermNew fzf
output=terminal
cwd=$(VIM_FILEDIR)

[project-fzf-floaterm]
command=:FloatermNew fzf
output=terminal
cwd=$(VIM_ROOT)

[file-run-floaterm]
command="$(VIM_FILEPATH)"
command:c=:FloatermNew --autoclose=0 gcc -std=gnu99 -o a.out $(VIM_FILEPATH);  "$(VIM_FILEDIR)/a.out" 
command:cpp=:FloatermNew --autoclose=0 g++  -std=c++17 -g -Wall "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/a.out" && "$(VIM_FILEDIR)/a.out"
command:go=:FloatermNew --autoclose=0 go run "$(VIM_FILENAME)"
command:python=:FloatermNew --autoclose=0 python3 "$(VIM_FILENAME)"
command:java=:FloatermNew --autoclose=0 javac "$(VIM_FILEPATH)" && java "$(VIM_FILENOEXT)" && rm "$(VIM_PATHNOEXT).class"
command:javascript=:FloatermNew --autoclose=0 node "$(VIM_FILENAME)"
command:typescript=:FloatermNew --autoclose=0 ts-node "$(VIM_FILEPATH)"
command:sh=:FloatermNew --autoclose=0 bash "$(VIM_FILENAME)"
command:lua=:FloatermNew --autoclose=1 lua "$VIM_FILENAME"
command:perl=:FloatermNew --autoclose=0 perl "$(VIM_FILENAME)"
command:ruby=:FloatermNew --autoclose=0 ruby "$(VIM_FILENAME)"
command:markdown=:MarkdownPreview
command:vim=:source%
output=terminal
pos=hide
cwd=$(VIM_FILEDIR)
focus=1
notify=echo
save=2

[file-debug]
command=:echo "No debugger for certain file-type"
command:c,cpp=:GdbStart $(VIM_PATHNOEXT)
cwd=$(VIM_FILEDIR)

[make]
command=make -f "$(VIM_FILEPATH)"
cwd=$(VIM_FILEDIR)

[make-run]
command=make -f "$(VIM_FILEPATH)" run
cwd=$(VIM_FILEDIR)
output=terminal

[make-test]
command=make -f "$(VIM_FILEPATH)" test
cwd=$(VIM_FILEDIR)
output=terminal

[emake]
command=emake --abs --cfg=$(+econfig:) --profile=$(+profile:) --int=+ "$(VIM_FILEPATH)"
command:yacc=bison -d $(+yacc_flag:) -o "$(VIM_PATHNOEXT).$(+yacc_ext:c)" "$(VIM_FILEPATH)" && emake "$(VIM_PATHNOEXT).$(+yacc_ext:c)"
cwd=$(VIM_FILEDIR)
save=2

[emake-switch-profile]
command=:AsyncTaskEnviron profile debug release

[emake-switch-config]
command=:AsyncTaskEnviron econfig mingw32 mingw64 mingw

[emake-reset-config]
command=:AsyncTaskEnviron! econfig

[emake-clean]
command=emake -clean --cfg=$(+econfig:) --profile=$(+profile:) --int=+ "$(VIM_FILEPATH)"
cwd=$(VIM_FILEDIR)

[emake-exe]
command=emake -e --cfg=$(+econfig:) --profile=$(+profile:) --int=+ "$(VIM_FILEPATH)"
cwd=$(VIM_FILEDIR)
output=terminal

[emake-auto]
command=emake --abs --cfg=$(+econfig:) --profile=$(+profile:) --int=+ "$(VIM_FILENAME)"
command:make=make -f "$(VIM_FILENAME)"
cwd=$(VIM_FILEDIR)

[project-build]
command=make
command:zig=zig build $(-step:install)
command:dart=flutter build
command:cs,fsharp=dotnet build
command:rust=cargo build
cwd=$(VIM_ROOT)
save=2

[project-run]
command=make run
command:zig=zig build run
command:dart=flutter run
command:cs,fsharp=dotnet run
command:rust=cargo run
cwd=$(VIM_ROOT)
output=terminal
save=2

[project-test]
command=make test
cwd=$(VIM_ROOT)
output=terminal
save=2

[project-clean]
command/linux=find . -type f -executable -delete
cwd=$(VIM_ROOT)

# project-wide search, ask user input keyword       Input argument (keyword):
[grep-root-word]
command=rg -n --no-heading --color never "$(?keyword)" "<root>" -tc -tcpp -tpy -tvim -tgo -tasm -tlua -tjs
cwd=<root>
errorformat=%f:%l:%m

# project-wide search, search the word under cursor (default select)
[grep-root-cword]
command=rg -n --no-heading --color never "$(VIM_CWORD)" "<root>" -tc -tcpp -tpy -tvim -tgo -tasm -tlua -tjs
cwd=<root>
errorformat=%f:%l:%m

[quickfix-rg-grep]
command=rg -n --no-heading --color never "$(-word)" "." -tcpp -tc -tpy -tvim -tgo -tlua
cwd=.
errorformat=%f:%l:%m

[quickfix-rg-grep-project]
command=rg -n --no-heading --color never "$(-word)" "<root>" -tcpp -tc -tpy -tvim -tgo -tlua
cwd=$(VIM_ROOT)
errorformat=%f:%l:%m

[quickfix-rg-grep-filetype]
command=rg -n --no-heading --color never "$(-word)" "." $(-filetyps:-tcpp -tc -tpy -tvim -tgo -tlua)
cwd=.
errorformat=%f:%l:%m

[vc-2015]
command/win32=d:\dev\vc2015\vcvarsall.cmd cl.exe -nologo -O2 -EHsc "$(VIM_FILEPATH)"
cwd=$(VIM_FILEDIR)
errorformat=%f(%l):%m

[vc-2017]
command/win32=d:\dev\vc2017\vcvarsall.cmd cl.exe -nologo -O2 /arch:AVX "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT).exe"
cwd=$(VIM_FILEDIR)
errorformat=%f(%l):%m
save=2

[git-user-proxy-on]
command=git config --global http.proxy "socks5://127.0.0.1:1080" && git config --global https.proxy "socks5://127.0.0.1:1080"

[git-user-proxy-off]
command=git config --global --unset http.proxy && git config --global --unset https.proxy

[git-local-proxy-on]
command=git config --local http.proxy "socks5://127.0.0.1:1080" && git config --local https.proxy "socks5://127.0.0.1:1080"

[git-local-proxy-off]
command=git config --local --unset http.proxy && git config --local --unset https.proxy

[git-config-list]
command/win32=type .git\config
command=cat .git/config
cwd=<root>
errorformat=

[git-push]
command=git push
cwd=<root>
errorformat=

[git-fetch]
command=git fetch
cwd=<root>
errorformat=

[git-pull]
command=git pull
cwd=<root>
errorformat=

[git-lazygit]
command=gitui
cwd=$(VIM_ROOT)
output=terminal
pos=TAB
close=1
filetype=termlite

[git-clean]
command=git clean -f -d -x
cwd=$(VIM_ROOT)
output=terminal
pos=quickfix

[mintty-lazygit]
command=C:\DRIVERS\shim\lazygit-mintty
cwd=$(VIM_ROOT)
output=terminal
pos=hide

[wezterm-lazygit]
command=start "D:\Program Files\wezterm\openconsole" lazygit
cwd=$(VIM_ROOT)
output=terminal
pos=hide

# project-wide search, ask user select keyword "(r)eflog, (l)og"
[git-log]
command=git $(-type:&reflog,&log)
cwd=<root>

[git-log-file]
command=:GV!
output=terminal
pos=tab
cwd=$(VIM_FILEDIR)

[git-log-project]
command=:GV
output=terminal
pos=tab
cwd=<root>

[git-log-file-rev]
command=:GV?
output=terminal
pos=tab
cwd=$(VIM_FILEDIR)

[git-tig]
command=tig
cwd=$(VIM_ROOT)
output=terminal
pos=TAB
close=1
filetype=termlite

[mingw-lib-init]
command/win32=mkdir build && cd build && cmake .. -G "MinGW Makefiles" -DCMAKE_INSTALL_PREFIX=d:/dev/local/build
command=mkdir build && cd build && cmake .. -G "MinGW Makefiles"
cwd=<root>
errorformat=

[mingw-lib-build]
command=cmake --build build
cwd=<root>
errorformat=%f:%l:%m

[mingw-lib-install]
command=cmake --install build
cwd=<root>
errorformat=

[langtool]
command="$(VIM_FILEPATH)"
cwd="$(VIM_FILEDIR)"
program=make
compiler=langtool
once=1
strip=1
scroll=0
encoding=utf-8

[mud-xkx]
command=telnet pkuxkx.net 8081
program=wsl
output=terminal
pos=right

[task-f2]
command=python --version
output=terminal
pos=tab
focus=0
close=1

[markdown-glow]
command=glow -p "$(VIM_FILENAME)"
output=terminal
pos=tab
filetype=termlite

[profile-switch]
command=:AsyncTaskEnviron profile debug release

[cmake-list-target]
command=cmake --build build --target help
cwd=<root>

[cmake-list-config]
command=cmake -L build
cwd=<root>

[build-bcc32]
command=D:\dev\bcc\run-bcc32.cmd -WM "$(VIM_FILENAME)"
cwd=$(VIM_FILEDIR)

[build-vc6]
command="D:\Program Files\Microsoft Visual Studio\vcvars32.cmd" cl.exe /nologo /O1 /MT "$(VIM_FILENAME)"
cwd=$(VIM_FILEDIR)

[wsl-file-build]
command=gcc "$(WSL_FILEPATH)" -o "$(WSL_FILENOEXT)" $(+WSL_CFLAGS:) $(+WSL_LDFLAGS:)
command:make=make -f "$(WSL_FILEPATH)"
command:emake=emake --profile=$(+wsl_profile:) --int=+ "$(WSL_FILENAME)"
program=wsl
cwd=$(VIM_FILEDIR)
save=2

[wsl-file-run]
command="$(WSL_FILEPATH)"
command:c,cpp="./$(WSL_FILENOEXT)"
command:python=python3 "$(WSL_FILENAME)"
command:lua=lua "$(WSL_FILENAME)"
command:make=make -f "$(WSL_FILENAME)" run
command:emake=emake -e --profile=$(+wsl_profile:) "$(WSL_FILENAME)"
command:sh=sh "$(WSL_FILENAME)"
command:javascript=node "$(WSL_FILENAME)"
command:typescript=deno run "$(WSL_FILENAME)"
command:perl=perl "$(WSL_FILENAME)"
command:ruby=ruby "$(WSL_FILENAME)"
command:zsh=zsh "$(WSL_FILENAME)"
command:bash=bash "$(WSL_FILENAME)"
command:fish=fish "$(WSL_FILENAME)"
command:php=php "$(WSL_FILENAME)"
command:erlang=escript "$(WSL_FILENAME)"
command:ps1=powershell -file "$(WSL_FILENAME)"
command:scala=scala "$(WSL_FILENAME)"
command:haskell=runhaskell "$(WSL_FILENAME)"
program=wsl
cwd=$(VIM_FILEDIR)
output=terminal
save=2

[wsl-project-build]
command=make
program=wsl
cwd=$(VIM_ROOT)
save=2
save=2

[wsl-project-run]
command=make run
program=wsl
cwd=$(VIM_ROOT)
output=terminal
save=2

[wsl-project-init]
command=echo init project
program=wsl
cwd=$(VIM_ROOT)
save=2

[wsl-emake]
command=emake --abs --cfg=$(+wsl_econfig:) --profile=$(+wsl_profile:) --int=+ "$(WSL_FILEPATH)"
program=wsl
cwd=$(VIM_FILEDIR)
save=2

[wsl-emake-clean]
command=emake -clean --cfg=$(+wsl_econfig:) --profile=$(+wsl_profile:) --int=+ "$(WSL_FILEPATH)"
program=wsl
cwd=$(VIM_FILEDIR)

[wsl-emake-exe]
command=emake -e --cfg=$(+wsl_econfig:) --profile=$(+wsl_profile:) --int=+ "$(WSL_FILEPATH)"
program=wsl
cwd=$(VIM_FILEDIR)
output=terminal

[go-run-file]
command=go run "$(VIM_FILENAME)"
cwd=$(VIM_FILEDIR)
output=terminal


[net-start-http]
command=python -m SimpleHTTPServer $(?port)

[net-whois-domain]
command=/usr/bin/whois -h whois.internic.net $(?domain) | sed '/NOTICE:/q'

[test-var-replace]
# let g:asynctasks_environ = {'my_name': 'Somebody'}
command=echo $(VIM:my_name)


[sh-me]
command=bash

[sh-range]
command=:'<,'>AsyncTask sh-me

# curl cheat.sh/tar
# curl cht.sh/curl
# curl https://cheat.sh/rsync
# curl https://cht.sh/tr
# https://github.com/chubin/cheat.sh
# https://github.com/dbeniamine/cheat.sh-vim.git
# curl -s https://cht.sh/:cht.sh | sudo tee /usr/local/bin/cht.sh && sudo chmod +x /usr/local/bin/cht.sh
[cheat-cht.sh]
command=curl https://cht.sh/$(-cmd:tar)

[cheat-cht.sh-search]
command=curl https://cht.sh/~$(-search:pattern)

[cheat-cht.sh-lang-list]
command=curl https://cht.sh/$(-lang:&bash,&c,&perl,&go,&python)/:list

[cheat-cht.sh-lang-list]
command=curl cht.sh/$(-lang:&bash,&c,&perl,&go,&python)/rosetta/:list

[cheat-cht.sh-lang-search]
command=curl https://cht.sh/$(-lang:&bash,&c,&perl,&go,&python)/$(-keyword:function)